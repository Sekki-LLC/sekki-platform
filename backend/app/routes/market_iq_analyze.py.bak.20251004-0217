from __future__ import annotations
import json, os, re, uuid
from pathlib import Path
from flask import Blueprint, request, jsonify, current_app
try:
    from anthropic import Anthropic
except Exception:
    Anthropic = None

market_iq_analyze_bp = Blueprint("market_iq_analyze", __name__)

ROOT = Path(__file__).resolve().parents[2]
SESS_DIR = Path(os.getenv("SESSION_DIR", ROOT / "runtime" / "sessions"))
ANTHROPIC_MODEL = os.getenv("ANTHROPIC_MODEL", "claude-3-5-sonnet-latest")
CLIENT = Anthropic(api_key=os.getenv("ANTHROPIC_API_KEY")) if (Anthropic and os.getenv("ANTHROPIC_API_KEY")) else None

def _load_transcript(session_id: str) -> str:
    p = SESS_DIR / f"{session_id}.json"
    if p.exists():
        try:
            j = json.loads(p.read_text()); hist = j.get("history", [])
            lines=[]
            for m in hist:
                role = "User" if m.get("role")=="user" else "AI"
                c = (m.get("content") or "").strip()
                if c: lines.append(f"{role}: {c}")
            return "\n".join(lines)
        except Exception:
            return ""
    return ""

def _only_json(text: str) -> dict:
    txt = text.strip()
    txt = re.sub(r"^```(json)?", "", txt).strip()
    txt = re.sub(r"```$", "", txt).strip()
    m = re.search(r"\{.*\}\s*$", txt, re.S)
    if m: txt = m.group(0)
    try: return json.loads(txt)
    except Exception: return {}

SYSTEM = (
 "You are a top 0.1% market analyst. Read the transcript and output ONLY compact JSON "
 "for a Market IQ scorecard schema: {project_name, market_iq_score:int(0-100), summary, "
 "assumptions:[], risks:[], next_steps:[], component_scores:{strategy:int,market:int,team:int,execution:int,financials:int}, "
 "financial_impact:{ebitda_at_risk, roi_opportunity}}. No markdown/prose outside JSON."
)

def _llm_analyze(transcript: str) -> dict:
    if not CLIENT:
        base = 50 + min(30, transcript.count("\n"))
        score = max(40, min(90, base))
        return {
            "project_name": "Market IQ Project",
            "market_iq_score": score,
            "summary": "Heuristic summary based on conversation length.",
            "assumptions": ["Budget & timeline approximated","Buyer and problem inferred"],
            "risks": ["Data quality of transcript","Unverified GTM assumptions"],
            "next_steps": ["Validate buyer pain","Pilot with 3 customers","Tighten budget & KPI"],
            "component_scores": {"strategy":score-5,"market":score-10,"team":score-8,"execution":score-12,"financials":score-7},
            "financial_impact": {"ebitda_at_risk":"Medium","roi_opportunity":"Moderate"},
        }
    try:
        resp = CLIENT.messages.create(
            model=ANTHROPIC_MODEL,
            system=SYSTEM,
            max_tokens=900,
            temperature=0.2,
            messages=[{"role":"user","content": f"Transcript:\n{transcript}"}],
        )
        data = _only_json(resp.content[0].text)
        if not data.get("market_iq_score"): data["market_iq_score"] = 65
        return data
    except Exception as e:
        current_app.logger.exception("analyze_llm_error: %s", e)
        return {}

@market_iq_analyze_bp.route("/analyze", methods=["POST"])
def analyze_from_conversation():
    p = request.get_json(silent=True) or {}
    sid = (p.get("session_id") or "").strip()
    transcript = (p.get("transcript") or "").strip() or (_load_transcript(sid) if sid else "")
    current_app.logger.info("analyze: sid=%s chars=%d", sid or "-", len(transcript))
    if not transcript:
        return jsonify({"error":"No transcript"}), 400
    result = _llm_analyze(transcript) or {}
    if not result:
        return jsonify({"error":"Analysis failed"}), 502
    analysis_id = sid or f"analysis_{uuid.uuid4().hex[:8]}"
    result["analysis_id"] = analysis_id
    return jsonify({"analysis_result": result, "analysis_id": analysis_id})
